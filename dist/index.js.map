{"version":3,"file":"index.js","sources":["../src/styles.ts","../src/index.tsx"],"sourcesContent":["import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --ReactInputVerificationCode-itemWidth: 4.5rem;\n    --ReactInputVerificationCode-itemHeight: 5rem;\n    --ReactInputVerificationCode-itemSpacing: 1rem;\n  }\n`;\n\ninterface ContainerProps {\n  itemscount: number;\n}\n\nexport const Container = styled.div<ContainerProps>`\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  width: ${({ itemscount }) =>\n    `calc(\n      var(--ReactInputVerificationCode-itemWidth) * ${itemscount}\n      + var(--ReactInputVerificationCode-itemSpacing) * (${itemscount} - 1)\n    )`};\n`;\n\ninterface InputProps {\n  activeindex: number;\n}\n\nexport const Input = styled.input<InputProps>`\n  position: absolute;\n  top: 0;\n  left: ${({ activeindex }) =>\n    `calc(\n      var(--ReactInputVerificationCode-itemWidth) * ${activeindex}\n      + var(--ReactInputVerificationCode-itemSpacing) * ${activeindex}\n    )`};\n  opacity: 0;\n  width: var(--ReactInputVerificationCode-itemWidth);\n  height: var(--ReactInputVerificationCode-itemHeight);\n`;\n\nexport const Item = styled.div`\n  width: var(--ReactInputVerificationCode-itemWidth);\n  height: var(--ReactInputVerificationCode-itemHeight);\n  padding: 0;\n  border-radius: 4px;\n  font-size: 1.5rem;\n  font-weight: 800;\n  line-height: var(--ReactInputVerificationCode-itemHeight);\n  text-align: center;\n  border: 0;\n  box-shadow: inset 0 0 0 1px #ccc;\n  transition: box-shadow 0.2s ease-out;\n\n  &.is-active {\n    box-shadow: inset 0 0 0 2px #888;\n  }\n`;\n","import * as React from 'react';\nimport * as S from './styles';\n\nconst KEY_CODE = {\n  BACKSPACE: 8,\n  ARROW_LEFT: 37,\n  ARROW_RIGHT: 39,\n  DELETE: 46,\n};\n\nexport interface ReactInputVerificationCodeProps {\n  autoFocus?: boolean;\n  length?: number;\n  onChange?: (data: string) => void;\n  onCompleted?: (data: string) => void;\n  placeholder?: string;\n  value?: string;\n  dataCy?: string;\n  type?: 'text' | 'password';\n  passwordMask?: string;\n}\n\nconst ReactInputVerificationCode = ({\n  autoFocus = false,\n  length = 4,\n  onChange = () => {},\n  onCompleted = () => {},\n  placeholder = '·',\n  value: pValue,\n  dataCy = 'verification-code',\n  type = 'text',\n  passwordMask = '•',\n}: ReactInputVerificationCodeProps) => {\n  const emptyValue = new Array(length).fill(placeholder);\n\n  const [activeIndex, setActiveIndex] = React.useState<number>(-1);\n  const [value, setValue] = React.useState<string[]>(\n    pValue ? pValue.split('') : emptyValue\n  );\n\n  const codeInputRef = React.createRef<HTMLInputElement>();\n  const itemsRef = React.useMemo(\n    () =>\n      new Array(length).fill(null).map(() => React.createRef<HTMLDivElement>()),\n    [length]\n  );\n\n  const isCodeRegex = new RegExp(`^[0-9]{${length}}$`);\n\n  const getItem = (index: number) => itemsRef[index]?.current;\n  const focusItem = (index: number): void => getItem(index)?.focus();\n  const blurItem = (index: number): void => getItem(index)?.blur();\n\n  const onItemFocus = (index: number) => () => {\n    setActiveIndex(index);\n    if (codeInputRef.current) codeInputRef.current.focus();\n  };\n\n  const onInputKeyUp = ({ key, keyCode }: React.KeyboardEvent) => {\n    const newValue = [...value];\n    const nextIndex = activeIndex + 1;\n    const prevIndex = activeIndex - 1;\n\n    const codeInput = codeInputRef.current;\n    const currentItem = getItem(activeIndex);\n\n    const isLast = nextIndex === length;\n    const isDeleting =\n      keyCode === KEY_CODE.DELETE || keyCode === KEY_CODE.BACKSPACE;\n\n    // keep items focus in sync\n    onItemFocus(activeIndex);\n\n    // on delete, replace the current value\n    // and focus on the previous item\n    if (isDeleting) {\n      newValue[activeIndex] = placeholder;\n      setValue(newValue);\n\n      if (activeIndex > 0) {\n        setActiveIndex(prevIndex);\n        focusItem(prevIndex);\n      }\n\n      return;\n    }\n\n    // if the key pressed is not a number\n    // don't do anything\n    if (Number.isNaN(+key)) return;\n\n    // reset the current value\n    // and set the new one\n    if (codeInput) codeInput.value = '';\n    newValue[activeIndex] = key;\n    setValue(newValue);\n\n    if (!isLast) {\n      setActiveIndex(nextIndex);\n      focusItem(nextIndex);\n      return;\n    }\n\n    if (codeInput) codeInput.blur();\n    if (currentItem) currentItem.blur();\n\n    setActiveIndex(-1);\n  };\n\n  // handle mobile autocompletion\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: changeValue } = e.target;\n    const isCode = isCodeRegex.test(changeValue);\n\n    if (!isCode) return;\n\n    setValue(changeValue.split(''));\n    blurItem(activeIndex);\n  };\n\n  const onInputBlur = () => {\n    // https://github.com/ugogo/react-input-verification-code/issues/1\n    if (activeIndex === -1) return;\n\n    blurItem(activeIndex);\n    setActiveIndex(-1);\n  };\n\n  // autoFocus\n  React.useEffect(() => {\n    if (autoFocus && itemsRef[0].current) {\n      itemsRef[0].current.focus();\n    }\n  }, []);\n\n  // handle pasting\n  React.useEffect(() => {\n    const codeInput = codeInputRef.current;\n    if (!codeInput) return;\n\n    const onPaste = (e: ClipboardEvent) => {\n      e.preventDefault();\n\n      const pastedString = e.clipboardData?.getData('text');\n      if (!pastedString) return;\n\n      const isNumber = /^\\d+$/.test(pastedString);\n      if (isNumber) setValue(pastedString.split('').slice(0, length));\n    };\n\n    codeInput.addEventListener('paste', onPaste);\n    return () => codeInput.removeEventListener('paste', onPaste);\n  }, []);\n\n  React.useEffect(() => {\n    const stringValue = value.join('');\n    const isCompleted = stringValue.length === length;\n\n    if (isCompleted && stringValue !== emptyValue.join(''))\n      onCompleted(stringValue);\n    onChange(stringValue);\n  }, [value, length]);\n\n  React.useEffect(() => {\n    if (typeof pValue !== 'string') return;\n\n    // avoid infinite loop\n    if (pValue === '' && value.join('') === emptyValue.join('')) return;\n\n    // keep internal and external states in sync\n    if (pValue !== value.join('')) setValue(pValue.split(''));\n  }, [pValue]);\n\n  const renderItemText = (itemValue: string) => {\n    if (itemValue === placeholder) return placeholder;\n    return type === 'password' ? passwordMask : itemValue;\n  };\n\n  return (\n    <React.Fragment>\n      <S.GlobalStyle />\n\n      <S.Container\n        className='ReactInputVerificationCode__container'\n        // needed for styling\n        itemscount={length}\n      >\n        <S.Input\n          ref={codeInputRef}\n          className='ReactInputVerificationCode__input'\n          autoComplete='one-time-code'\n          type='text'\n          inputMode='decimal'\n          id='one-time-code'\n          // use onKeyUp rather than onChange for a better control\n          // onChange is still needed to handle the autocompletion\n          // when receiving a code by SMS\n          onChange={onInputChange}\n          onKeyUp={onInputKeyUp}\n          onBlur={onInputBlur}\n          // needed for styling\n          activeindex={activeIndex}\n          data-cy={`${dataCy}-otc-input`}\n        />\n\n        {itemsRef.map((ref, i) => (\n          <S.Item\n            key={i}\n            ref={ref}\n            role='button'\n            tabIndex={0}\n            className={`ReactInputVerificationCode__item ${\n              value[i] !== placeholder ? 'is-filled' : ''\n            } ${i === activeIndex ? 'is-active' : ''}`}\n            onFocus={onItemFocus(i)}\n            data-cy={`${dataCy}-${i}-item`}\n          >\n            {renderItemText(value[i])}\n          </S.Item>\n        ))}\n      </S.Container>\n    </React.Fragment>\n  );\n};\n\nexport default ReactInputVerificationCode;\n"],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","itemscount","Input","input","activeindex","Item","KEY_CODE","BACKSPACE","ARROW_LEFT","ARROW_RIGHT","DELETE","ReactInputVerificationCode","autoFocus","length","onChange","onCompleted","placeholder","pValue","value","dataCy","type","passwordMask","emptyValue","Array","fill","React","activeIndex","setActiveIndex","split","setValue","codeInputRef","itemsRef","map","isCodeRegex","RegExp","getItem","index","current","focusItem","focus","blurItem","blur","onItemFocus","onInputKeyUp","key","keyCode","newValue","nextIndex","prevIndex","codeInput","currentItem","isLast","isDeleting","Number","isNaN","onInputChange","e","changeValue","target","isCode","test","onInputBlur","onPaste","preventDefault","pastedString","clipboardData","getData","isNumber","slice","addEventListener","removeEventListener","stringValue","join","isCompleted","renderItemText","itemValue","S","className","ref","autoComplete","inputMode","id","onKeyUp","onBlur","i","role","tabIndex","onFocus"],"mappings":"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"}